{"ast":null,"code":"// Import necessary modules\nimport React,{useState}from'react';import'./loginComponent.css';// Import your CSS file for specific styling\nimport Cookies from'js-cookie';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const LoginForm=_ref=>{let{handleLogin}=_ref;const[formData,setFormData]=useState({Email:'',password:''});const[loginMessage,setLoginMessage]=useState('');const handleChange=e=>{const{name,value}=e.target;setFormData(prevData=>({...prevData,[name]:value}));};const handleSubmit=async e=>{e.preventDefault();try{const response=await fetch('http://localhost:3000/api/v1/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(formData),credentials:'include'});if(response.ok){const responseData=await response.json();// Assuming your authentication token is named 'auth_token'\nconst authToken=responseData.auth_token;// Assuming the user ID is available in responseData.user.id\nconst userId=responseData.user._id;// Store the auth token and user ID in cookies\nCookies.set('auth_token',authToken,{expires:7});// Expires in 7 days\nCookies.set('user_id',userId,{expires:7});// Expires in 7 days\nconst role=responseData.user.role;localStorage.setItem('loginMessage',JSON.stringify(responseData));setLoginMessage(\"Login successful. User ID: \".concat(userId,\", User role: \").concat(role));handleLogin(role);}else{setLoginMessage('Login failed. Please check your email and password.');}}catch(error){console.error('Error:',error);setLoginMessage('An error occurred during login.');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"login-form-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"login-form\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Email:\",/*#__PURE__*/_jsx(\"input\",{type:\"email\",name:\"Email\",value:formData.Email,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Password:\",/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",value:formData.password,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Login\"})]}),loginMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"login-message\",children:loginMessage})]});};export default LoginForm;","map":{"version":3,"names":["React","useState","Cookies","jsx","_jsx","jsxs","_jsxs","LoginForm","_ref","handleLogin","formData","setFormData","Email","password","loginMessage","setLoginMessage","handleChange","e","name","value","target","prevData","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","credentials","ok","responseData","json","authToken","auth_token","userId","user","_id","set","expires","role","localStorage","setItem","concat","error","console","className","children","onSubmit","type","onChange"],"sources":["/Users/mazen/Help_Desk/frontend/my-react-app/src/components/loginComponent.js"],"sourcesContent":["// Import necessary modules\nimport React, { useState } from 'react';\nimport './loginComponent.css'; // Import your CSS file for specific styling\nimport Cookies from 'js-cookie';\n\nconst LoginForm = ({ handleLogin }) => {\n  const [formData, setFormData] = useState({\n    Email: '',\n    password: '',\n  });\n\n  const [loginMessage, setLoginMessage] = useState('');\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:3000/api/v1/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const responseData = await response.json();\n\n        // Assuming your authentication token is named 'auth_token'\n        const authToken = responseData.auth_token;\n\n        // Assuming the user ID is available in responseData.user.id\n        const userId = responseData.user._id;\n\n        // Store the auth token and user ID in cookies\n        Cookies.set('auth_token', authToken, { expires: 7 }); // Expires in 7 days\n        Cookies.set('user_id', userId, { expires: 7 }); // Expires in 7 days\n\n        const role = responseData.user.role;\n        localStorage.setItem('loginMessage', JSON.stringify(responseData));\n        setLoginMessage(`Login successful. User ID: ${userId}, User role: ${role}`);\n        handleLogin(role);\n      } else {\n        setLoginMessage('Login failed. Please check your email and password.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setLoginMessage('An error occurred during login.');\n    }\n  };\n\n  return (\n    <div className=\"login-form-container\">\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit} className=\"login-form\">\n        <label>\n          Email:\n          <input\n            type=\"email\"\n            name=\"Email\"\n            value={formData.Email}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label>\n          Password:\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Login</button>\n      </form>\n\n      {loginMessage && <p className=\"login-message\">{loginMessage}</p>}\n    </div>\n  );\n};\n\nexport default LoginForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}