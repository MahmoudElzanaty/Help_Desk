{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abdulsamia alazazy\\\\Documents\\\\GitHub\\\\Help_Desk\\\\client\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:YOUR_SERVER_PORT'); // Replace YOUR_SERVER_PORT with the actual port your server is running on\n\nconst Chat = ({\n  senderId,\n  receiverId\n}) => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  useEffect(() => {\n    // Listen for incoming chat messages\n    socket.on(\"chat message\", newMessage => {\n      setChatMessages(prevMessages => [...prevMessages, newMessage]);\n    });\n    return () => {\n      // Clean up the event listener when the component is unmounted\n      socket.off(\"chat message\");\n    };\n  }, []);\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (message.trim() === \"\") {\n      return;\n    }\n    const newMessage = {\n      sender: senderId,\n      receiver: receiverId,\n      message\n    };\n\n    // Emit the chat message to the server\n    socket.emit(\"chat message\", newMessage);\n    setChatMessages(prevMessages => [...prevMessages, newMessage]);\n    setMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: chatMessages.map((chatMessage, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [chatMessage.sender, \": \", chatMessage.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"mb3Cba+80I0AEIuj6P1jd22gmG4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","socket","Chat","senderId","receiverId","_s","message","setMessage","chatMessages","setChatMessages","on","newMessage","prevMessages","off","handleSendMessage","e","preventDefault","trim","sender","receiver","emit","children","map","chatMessage","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/abdulsamia alazazy/Documents/GitHub/Help_Desk/client/src/Chat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst socket = io('http://localhost:YOUR_SERVER_PORT'); // Replace YOUR_SERVER_PORT with the actual port your server is running on\r\n\r\n\r\nconst Chat = ({ senderId, receiverId }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Listen for incoming chat messages\r\n    socket.on(\"chat message\", (newMessage) => {\r\n      setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n    });\r\n\r\n    return () => {\r\n      // Clean up the event listener when the component is unmounted\r\n      socket.off(\"chat message\");\r\n    };\r\n  }, []);\r\n\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (message.trim() === \"\") {\r\n      return;\r\n    }\r\n\r\n    const newMessage = {\r\n      sender: senderId,\r\n      receiver: receiverId,\r\n      message,\r\n    };\r\n\r\n    // Emit the chat message to the server\r\n    socket.emit(\"chat message\", newMessage);\r\n\r\n    setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {chatMessages.map((chatMessage, index) => (\r\n          <li key={index}>\r\n            {chatMessage.sender}: {chatMessage.message}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGH,EAAE,CAAC,mCAAmC,CAAC,CAAC,CAAC;;AAGxD,MAAMI,IAAI,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd;IACAK,MAAM,CAACS,EAAE,CAAC,cAAc,EAAGC,UAAU,IAAK;MACxCF,eAAe,CAAEG,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;IAClE,CAAC,CAAC;IAEF,OAAO,MAAM;MACX;MACAV,MAAM,CAACY,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAIV,OAAO,CAACW,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzB;IACF;IAEA,MAAMN,UAAU,GAAG;MACjBO,MAAM,EAAEf,QAAQ;MAChBgB,QAAQ,EAAEf,UAAU;MACpBE;IACF,CAAC;;IAED;IACAL,MAAM,CAACmB,IAAI,CAAC,cAAc,EAAET,UAAU,CAAC;IAEvCF,eAAe,CAAEG,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;IAChEJ,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,oBACEP,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EACGb,YAAY,CAACc,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBACnCxB,OAAA;QAAAqB,QAAA,GACGE,WAAW,CAACL,MAAM,EAAC,IAAE,EAACK,WAAW,CAACjB,OAAO;MAAA,GADnCkB,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACL5B,OAAA;MAAM6B,QAAQ,EAAEf,iBAAkB;MAAAO,QAAA,gBAChCrB,OAAA;QACE8B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEzB,OAAQ;QACf0B,QAAQ,EAAGjB,CAAC,IAAKR,UAAU,CAACQ,CAAC,CAACkB,MAAM,CAACF,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACF5B,OAAA;QAAQ8B,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACvB,EAAA,CAvDIH,IAAI;AAAAgC,EAAA,GAAJhC,IAAI;AAyDV,eAAeA,IAAI;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}